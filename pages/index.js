import Head from "next/head";
import { useMoralis } from "react-moralis";
import styles from "../styles/Home.module.css";
import React, { useState, useEffect, useMemo } from "react";

export default function Home() {



  const {
		Moralis,
		user,
		logout,
		authenticate,
		enableWeb3,
		isInitialized,
		isAuthenticated,
		isWeb3Enabled,
	} = useMoralis();



  const [values, setValues] = useState({ tokenAddress: "", tokenId: "" });
  const web3Account = useMemo(
		() => isAuthenticated && user.get("accounts")[0],
		[user, isAuthenticated],
	);

	const getAsset = async () => {
		const res = await Moralis.Plugins.opensea.getAsset({
			network: "mainnet",
			tokenAddress: values.tokenAddress,
			tokenId: values.tokenId,
		});
		console.log(res);
	};

	const getOrder = async () => {
		const res = await Moralis.Plugins.opensea.getOrders({
			network: "mainnet",
			tokenAddress: values.tokenAddress,
			tokenId: values.tokenId,
			orderSide: 0,
			page: 1, // pagination shows 20 orders each page
		});
		console.log(res);
	};

	const createSellOrder = async () => {
		const expirationTime = Math.round(Date.now() / 1000 + 60 * 60 * 24);
		const startAmount = 1;
		const endAmount = 1;

		await Moralis.Plugins.opensea.createSellOrder({
			network: "mainnet",
			tokenAddress: values.tokenAddress,
			tokenId: values.tokenId,
			tokenType: "ERC1155",
			userAddress: web3Account,
			startAmount,
			endAmount,
			expirationTime: startAmount > endAmount && expirationTime, // Only set if you startAmount > endAmount
		});

		console.log("Create Sell Order Successful");
	};

	const createBuyOrder = async () => {
		await Moralis.Plugins.opensea.createBuyOrder({
			network: "mainnet",
			tokenAddress: values.tokenAddress,
			tokenId: values.tokenId,
			tokenType: "ERC721",
			amount: 0.0001,
			userAddress: web3Account,
      // WETH (Wrapped ETH) is a currency that allows users to make pre-authorized bids that can be fulfilled at a later date without any further action from the bidder. 
      // WETH is used to buy and sell with auctions on OpenSea. 
			paymentTokenAddress: "0xc778417e063141139fce010982780140aa0cd5ab",
		});

		console.log("Create Buy Order Successful");
	};

  const fulfillOrder = async () => {
    await Moralis.Plugins.opensea.fulfillOrder({
      network: 'mainnet',
      userAddress: web3Account,
      order: {},
    });
  }

  useEffect(() => {
		if (isInitialized) {
			Moralis.initPlugins();
		}
		// eslint-disable-next-line
	}, []);

  useEffect(() => {
		if (isAuthenticated && !isWeb3Enabled) {
			enableWeb3();
		}
		// eslint-disable-next-line
	}, [isAuthenticated]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {isAuthenticated ? (
        <>
          <button onClick={logout}>Logout</button>
          <h2>Welcome {user.get("username")}</h2>
          <h2>Your wallet address is {user.get("ethAddress")}</h2>
          <div>{web3Account}</div>
          <div>{values.tokenAddress} </div>
          <div>{values.tokenId} </div>
          <label>
            NFT Token Address:
            <input type="text" onChange={(e) =>
							setValues({ ...values, tokenAddress: e.target.value })
						} />
          </label> <br></br>
          <label>
            NFT Token ID:
            <input type="text" onChange={(e) =>
							setValues({ ...values, tokenId: e.target.value })
						} />
          </label> <br></br>
          <button onClick={getAsset}>
            getAsset
          </button>
          <button onClick={getOrder}>
            getOrder
          </button>
          <button onClick={createBuyOrder}>
            createBuyOrder
          </button>
          <button onClick={fulfillOrder}>
            fulfillOrder
          </button>
          
        </>
      ) : (
        <button
          onClick={() => {
            authenticate({ provider: "metamask" });
          }}
        >
          Sign in with MetaMask
        </button>
      )}
    </div>
  );
}
